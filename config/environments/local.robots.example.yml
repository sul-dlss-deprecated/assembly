#
#  Robot allocation strategy
#
#  Format:
#
#    host:
#      - robot[:lane[:instances]]
#
#  where
#    1. robot is a single robot identifier (fully-qualified with
#       REPO_SUITE_ROBOT, e.g., "dor_accessionWF_technical-metadata").
#    2. lane is a single integer (4), a range (3-5), or a list (2,4,8), 
#       or an asterix (*).
#    3. instances is a single integer.
#
#  Both lane and instances are optional. Lane defaults to *, and 
#  instances defaults to 1.
#
#  When a robot is allocated to multiple lanes, it reads them in
#  PRIORITY ORDER. That is, if a robot is listening to lanes 1, 2, and 3,
#  it works on lane 1 until empty, then lane 2 until empty, and then
#  lane 3 until empty. In the meantime, if a job comes in on a faster
#  lane, it works on that after finishing it's current job (i.e., after
#  working on a job in lane 3, if a job comes in on lane 1 in the intermin,
#  the robot will work on the lane 1 job next before returning to lane 3).
#
#  In general, lanes 1-5 are reserved for priority queues, and lanes 6-N
#  are dedicated lanes. 
#
#  Note that the syntax is YAML, so the lists must not contain spaces or
#  needs to be quoted.
#  
#    RIGHT
#      - dor_accessionWF_technical-metadata:10:5
#      - 'dor_accessionWF_technical-metadata : 10 : 5'
#
#    WRONG
#      - dor_accessionWF_technical-metadata : 10 : 5
#      - dor_accessionWF_technical-metadata: 10: 5
#

sul-robots1-dev:
  - dor_assemblyWF_jp2-create:*:3
  - dor_assemblyWF_checksum-compute:*:3
  - dor_assemblyWF_exif-collect
  - dor_assemblyWF_accessioning-initiate
  
sul-robots2-dev:
  - dor_assemblyWF_jp2-create:*:3
  - dor_assemblyWF_checksum-compute:*:3
  - dor_assemblyWF_exif-collect
  - dor_assemblyWF_accessioning-initiate
